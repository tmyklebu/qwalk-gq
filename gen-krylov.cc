#include "common.h"

#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
#include <algorithm>
#include <math.h>
#include <gmpxx.h>
using namespace std;

#define FOR(i,n) for (int i=0;i<n;i++)

// Generate row-reduced Krylov space bases modulo P, 16 at a time.
// Send them to stdout in the following format:
//
//  [P]
//  [numvecs] [arcs.size()]
//  [B[0,0]] ... [B[0,arcs.size()-1]] [p[0,0]] ... [p[0,numvecs-1]]
//  ...
//  [B[numvecs-1,0]] ... [B[numvecs-1,arcs.size()-1]] [p[numvecs-1,numvecs-1]] ... [p[numvecs-1,numvecs]]
//
// The rows of B form a basis for the Krylov space generated by some vector v.
// The rows of p are polynomials such that (p[i](A))(v) = B[i].
template <uint64_t P>
void doit() {
  vector<uint64_t> vvv(16*arcs.size());  // 16 random vecotrs; row-major order.
  for (size_t i = 0; i < vvv.size(); i++)
    vvv[i] = rand() % P;
  vector<vector<vector<uint64_t> > > vecs(16);  // 16 Krylov spaces.
  int dead[16] = {0};

  while (1) {
    int somenotdead = 0;
    for (size_t i = 0; i < vecs.size(); i++) if (!dead[i]) {
      somenotdead = 1;
      vector<uint64_t> v(arcs.size());
      for (size_t j = 0; j < arcs.size(); j++)
        v[j] = vvv[16*j+i];
      // Tack on a row from vvv and maintain the polynomials.
      for (size_t j = 0; j < vecs[i].size(); j++)
        vecs[i][j].push_back(0);
      vecs[i].push_back(v);
      while (vecs[i].back().size() < vecs[i][0].size()-1)
        vecs[i].back().push_back(0);
      vecs[i].back().push_back(1);

      int pivot = reduce<P>(vecs[i]);
      fprintf(stderr, "%i vectors; pivot is %i\n", (int)vecs[0].size(), pivot);
      if (pivot >= n) {
        dead[i] = 1;
      }
    }
    if (!somenotdead) break;
    vvv = hit<P,16>(vvv);
  }

  FOR(v, 16) {
    printf("%lli\n", P);
    printf("%i %i\n", (int)vecs[v].size(), (int)vecs[v][0].size());
    FOR(i,vecs[v].size()) {
      FOR(j, vecs[v][i].size()) printf("%lli ", vecs[v][i][j]);
      printf("\n");
    }
    printf("\n"); fflush(stdout);
  }
}

int main() {
  scanf("%i", &n);
  while (1) {
    int a,b;
    if (2 != scanf("%i %i", &a, &b)) break;
    adj[a][b] = adj[b][a] = 1;
    arcs.push_back(make_pair(a,b));
  }
  setup();

  while (1) doit<1999999151>();
}
